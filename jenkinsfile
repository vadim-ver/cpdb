def connectionString
def versionText
def versionValue
def configText
def configVer

pipeline {
    agent none
	
    environment {
		src_db_cred = credentials("${env.src_db_cred}")
		dst_db_cred = credentials("${env.dst_db_cred}")
		dst_ib_cred = credentials("${env.dst_ib_cred}")
		dst_ib_storage_cred = credentials("${env.dst_ib_storage_cred}")
    }

    stages {
        stage('Резервное копирование базы') {
			agent { label "${env.src_agent_label}"}
            steps {
				timestamps {
					cmd("cpdb backup -sql-srvr ${env.src_server_name} -sql-db ${env.src_db_name} -sql-user ${src_db_cred_Usr} -sql-pwd ${src_db_cred_Psw} -bak-path \"${env.src_bak_path}\\${env.bak_file_name}\"")
				}
            }
        }

        stage('Разбиение на части') {
            agent { label "${env.src_agent_label}"}
            steps {
                timestamps {
                    cmd("cpdb split -src \"${env.src_bak_path}\\${env.bak_file_name}\" -list \"${env.src_bak_path}\\${env.list_file_name}\" -vol 50m -hash -delsrc");
                }
            }
        }
        stage('Отправка частей на Я-Диск') {
            agent { label "${env.src_agent_label}"}
            steps {
                timestamps {
                    cmd("cpdb putyadisk -list \"${env.src_bak_path}\\${env.list_file_name}\" -ya-token ${env.storage_token} -ya-path \"${env.storage_path}\" -delsrc");
                }
            }
        }
        stage('Получение копии из хранилища') {
			agent { label "${env.dst_agent_label}"}
            steps {
                timestamps {
					cmd("cpdb getyadisk -path \"${env.dst_bak_path}\" -ya-token ${env.storage_token} -ya-list \"${env.storage_path}/${env.list_file_name}\" -delsrc");
                }
            }
        }

        stage('Сборка частей') {
			agent { label "${env.dst_agent_label}"}
            steps {
                timestamps {
					cmd("cpdb merge -list \"${env.dst_bak_path}\\${env.list_file_name}\" -delsrc");
                 }
            }
        }

        stage('Восстановление базы из резервной копии') {
			agent { label "${env.dst_agent_label}"}
            steps {
                timestamps {
					cmd("cpdb restore -sql-srvr ${env.dst_server_name} -sql-db ${env.dst_db_name} -sql-user ${dst_db_cred_Usr} -sql-pwd ${dst_db_cred_Psw} -bak-path \"${env.dst_bak_path}\\${env.bak_file_name}\" -create-db -shrink-db -db-owner ${env.dst_dbo} -db-path \"${env.dst_db_path}\" -db-logpath \"${env.dst_log_path}\" -db-recovery SIMPLE -db-changelfn");
                 }
            }
        }

        stage('Подключение базу к хранилищу конфигурации') {
			agent { label "${dst_ib_agent_label}"}
            steps {
                timestamps {
					cmd("cpdb uconstorage -ib-path ${dst_ib_con_string} -ib-user \"${dst_ib_cred_Usr}\" -ib-pwd \"${dst_ib_cred_Psw}\"");
					cmd("cpdb constorage -ib-path ${dst_ib_con_string} -storage-path ${dst_ib_storage_adr} -ib-user \"${dst_ib_cred_Usr}\" -ib-pwd \"${dst_ib_cred_Psw}\" -storage-user \"${dst_ib_storage_cred_Usr}\" -storage-pwd \"${dst_ib_storage_cred_Psw}\"");
                 }
            }
        }
        
    }
}

def cmd(command) {
    if (isUnix()) {
        sh "${command}"
    } else {
        bat "chcp 65001\n${command}"
    }
}
