#Использовать 1commands

Перем Лог;
Перем Сервер Экспорт;
Перем Пользователь Экспорт;
Перем Пароль Экспорт;

////////////////////////////////////////////////////////////////////////////////
// Работа с СУБД

Функция БазаСуществует(База) Экспорт

	ТекстЗапроса = """SET NOCOUNT ON; SELECT COUNT(name) from sysdatabases where name = '" + База + "'; SET NOCOUNT OFF""";
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		РезультатЗапроса = СокрЛП(СтрЗаменить(РезультатЗапроса, "-", ""));
		Возврат РезультатЗапроса = "1";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции //БазаСуществует()

Функция СоздатьБазу(База, ОписаниеРезультата = "") Экспорт

	Если БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ уже существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [master]; CREATE DATABASE " + База + "; ALTER DATABASE " + База + " SET RECOVERY SIMPLE""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //СоздатьБазу()

Функция УстановитьМодельВосстановления(База, МодельВосстановления = "FULL", ОписаниеРезультата = "") Экспорт

	Если ПустаяСтрока(МодельВосстановления) Тогда
		Возврат Истина;
	КонецЕсли;

	Если Найти(ВРег("FULL,SIMPLE,BULK_LOGGED"), ВРег(МодельВосстановления)) = 0 Тогда
		ОписаниеРезультата = "Указана некорректная модель восстановления """ + МодельВосстановления + " (возможные значения: ""FULL"", ""SIMPLE"", ""BULK_LOGGED"")!";
		Возврат Ложь;
	КонецЕсли;

	Если БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ уже существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [master]; ALTER DATABASE " + База + " SET RECOVERY " + ВРег(МодельВосстановления) + """";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //УстановитьМодельВосстановления()
	
Функция УстановитьВладельцаБазы(База, НовыйВладелец, ОписаниеРезультата = "") Экспорт

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """ALTER AUTHORIZATION ON DATABASE::" + База + " TO " + НовыйВладелец + """";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //УстановитьВладельцаБазы()

Функция СжатьБазу(База, ОписаниеРезультата = "") Экспорт

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """DBCC SHRINKDATABASE(N'" + База + "', 0)""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //СжатьБазу()

Функция СоздатьРезервнуюКопию(База, ПутьКРезервнойКопии, ОписаниеРезультата = "") Экспорт
	
	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """BACKUP DATABASE [" + База + "] TO  DISK = N'" + ПутьКРезервнойКопии
				 + "' WITH NOFORMAT, INIT,  NAME = N'" + База
				 + " FULL Backup', SKIP, NOREWIND, NOUNLOAD,COMPRESSION, STATS = 10""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
				 
	Возврат КодВозврата = 0;
	
КонецФункции //СоздатьРезервнуюКопию()

Функция ВосстановитьИзРезервнойКопии(База
								   , СоздаватьБазу = Ложь
								   , НовыйВладелец = ""
								   , СжатьБазу = Истина
								   , ПутьКРезервнойКопии
								   , ПутьКФайлуДанных
								   , ПутьКФайлуЖурнала
								   , МодельВосстановления = ""
								   , ИзменитьЛогическиеИменаФайлов = Ложь
								   , ОписаниеРезультата = "") Экспорт
	
	Если НЕ БазаСуществует(База) Тогда
		Если НЕ СоздаватьБазу Тогда
			ОписаниеРезультата = "База """ + База + """ не существует!";
			Возврат Ложь;
		Иначе
			Если НЕ СоздатьБазу(База, ОписаниеРезультата) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЛогическоеИмяФайлаДанных = ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, "D");
	ЛогическоеИмяФайлаЖурнала = ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, "L");

	ТекстЗапроса = """USE [master]; "
				 + "ALTER DATABASE " + База + " SET SINGLE_USER WITH ROLLBACK IMMEDIATE; "
				 + "RESTORE DATABASE [" + База + "] FROM  DISK = N'" + ПутьКРезервнойКопии + "' WITH  FILE = 1, "
						+ "MOVE N'" + ЛогическоеИмяФайлаДанных + "' TO N'" + ПутьКФайлуДанных + "\" + База + ".mdf', "
						+ "MOVE N'" + ЛогическоеИмяФайлаЖурнала + "' TO N'" + ПутьКФайлуЖурнала + "\" + База + "_log.ldf',"
						+ "NOUNLOAD,  REPLACE,  STATS = 10; "
				 +"ALTER DATABASE " + База + " SET MULTI_USER""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
				 
	Если ЗначениеЗаполнено(МодельВосстановления) Тогда
		УстановитьМодельВосстановления(База, МодельВосстановления);
	КонецЕсли;

	Если ИзменитьЛогическиеИменаФайлов Тогда
		ИзменитьЛогическоеИмяФайлаБазы(База, ЛогическоеИмяФайлаДанных, База);
		ИзменитьЛогическоеИмяФайлаБазы(База, ЛогическоеИмяФайлаЖурнала, База + "_log");
	КонецЕсли;

	Если ЗначениеЗаполнено(НовыйВладелец) Тогда
		УстановитьВладельцаБазы(База, НовыйВладелец);
	КонецЕсли;
	
	Если СжатьБазу Тогда
		СжатьБазу(База);
	КонецЕсли;
	
	Возврат КодВозврата = 0;

КонецФункции //ВосстановитьИзРезервнойКопии()

Функция ПолучитьСписокПолейТаблицыФайловРезервнойКопии()

	ОписаниеПолей = "[LogicalName] nvarchar(128),
					|[PhysicalName] nvarchar(260),
					|[Type] char(1),
					|[FileGroupName] nvarchar(128),
					|[Size] numeric(20,0),
					|[MaxSize] numeric(20,0),
					|[FileID] bigint,
					|[CreateLSN] numeric(25,0),
					|[DropLSN] numeric(25,0) NULL,
					|[UniqueID] uniqueidentifier,
					|[ReadOnlyLSN] numeric(25,0) NULL,
					|[ReadWriteLSN] numeric(25,0) NULL,
					|[BackupSizeInBytes] bigint,
					|[SourceBlockSize] int,
					|[FileGroupID] int,
					|[LogGroupGUID] uniqueidentifier NULL,
					|[DifferentialBaseLSN] numeric(25,0) NULL,
					|[DifferentialBaseGUID] uniqueidentifier,
					|[IsReadOnly] bit,
					|[IsPresent] bit,
					|[TDEThumbprint] varbinary(32)";

	Возврат ОписаниеПолей;

КонецФункции //ПолучитьСписокПолейТаблицыФайловРезервнойКопии()

Функция ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, ТипФайла = "D") Экспорт
	
	ТекстЗапроса = """SET NOCOUNT ON;"
					+ "DECLARE @T1CTmp TABLE (" + ПолучитьСписокПолейТаблицыФайловРезервнойКопии() + ");"
					+ "INSERT Into @T1CTmp EXECUTE('RESTORE FILELISTONLY FROM DISK = N''" + ПутьКРезервнойКопии + "''');"
					+ "SELECT [LogicalName] FROM @T1CTmp WHERE [Type] = '" + ВРег(ТипФайла) + "';"
					+ "SET NOCOUNT OFF; """;
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		Поз = СтрНайти(РезультатЗапроса, "---", НаправлениеПоиска.FromEnd);
		РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + 3));
		Возврат РезультатЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции //ПолучитьЛогическоеИмяФайлаВРезервнойКопии()
	
Функция ИзменитьЛогическоеИмяФайлаБазы(База, Имя, НовоеИмя, ОписаниеРезультата = "") Экспорт

	ТекстЗапроса = """USE [master];"
				 + "ALTER DATABASE [" + База + "] MODIFY FILE (NAME = N'" + Имя + "', NEWNAME = N'" + НовоеИмя + "');";
				 
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
		
	Возврат КодВозврата = 0;
		
КонецФункции //ИзменитьЛогическоеИмяФайлаБазы()

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

Функция ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата = "") Экспорт

	Лог.Отладка("Текст запроса: %1", ТекстЗапроса);
	
	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду("sqlcmd");
	КомандаРК.ДобавитьПараметр("-S " + Сервер);
	КомандаРК.ДобавитьПараметр("-U " + Пользователь);
	КомандаРК.ДобавитьПараметр("-P " + Пароль);
	КомандаРК.ДобавитьПараметр("-Q " + ТекстЗапроса);
	КомандаРК.ДобавитьПараметр("-b");

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы( Ложь );
	КомандаРК.ПоказыватьВыводНемедленно( Ложь );
	
	КодВозврата = КомандаРК.Исполнить();

	ОписаниеРезультата = КомандаРК.ПолучитьВывод();

	Возврат КодВозврата;

КонецФункции //ВыполнитьЗапросСУБД()
	
Процедура Инициализировать(Знач _Сервер, Знач _Пользователь, Знач _Пароль) Экспорт
	
	Сервер			= _Сервер;
	Пользователь	= _Пользователь;
	Пароль			= _Пароль;
	
КонецПроцедуры //Инициализировать()

	
Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");