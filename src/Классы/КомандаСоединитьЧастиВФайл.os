///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Перем Лог;
Перем УдалитьИсточник;

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Восстановить файл из частей (требуется установленный 7-zip)");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-params",
		"Файлы JSON содержащие значения параметров,
		|могут быть указаны несколько файлов разделенные "";""
		|(параметры командной строки имеют более высокий приоритет)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
		"-file",
		"Имя файла архива (не обязательный, по умолчанию <имя исходного файла>.7z)");
		
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды,
		"-delsource",
		"Удалить исходный файл после выполнения операции");
	
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры

Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
	
	ЗапускПриложений.ПрочитатьПараметрыКомандыИзФайла(ПараметрыКоманды["-params"], ПараметрыКоманды);
	
	ЭтоСписокФайлов = Истина;

	ПутьКАрхиву				= ПараметрыКоманды["-list"];
	Если НЕ ЗначениеЗаполнено(ПутьКАрхиву) Тогда
		ПутьКАрхиву			= ПараметрыКоманды["-file"];
		ЭтоСписокФайлов	= Ложь;
	КонецЕсли;
	УдалитьИсточник			= ПараметрыКоманды["-delsource"];
	
	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();
	
	Если ПустаяСтрока(ПутьКАрхиву) Тогда
		Лог.Ошибка("Не указан путь к первому файлу архива");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;
	
	ПутьК7ЗИП = ЗапускПриложений.Найти7Zip();
	
	Если НЕ ЗначениеЗаполнено(ПутьК7ЗИП) Тогда
		Лог.Ошибка("7-Zip не найден");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;
	
	Попытка
		РаспаковатьАрхив(ПутьК7ЗИП, ПутьКАрхиву, ЭтоСписокФайлов);

		Возврат ВозможныйРезультат.Успех;
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

КонецФункции

//***************************************
// Основная функция распаковки файла
//***************************************
Процедура РаспаковатьАрхив(Знач Архиватор, Знач ПутьКАрхиву, ЭтоСписокФайлов = Ложь)
					   
	ДанныеИсхФайла = Новый Файл(ПутьКАрхиву);

	ИмяФайлаОшибокАрхивации = ДанныеИсхФайла.Путь + "7z_error_messages.txt";

	МассивФайловЧастей = Новый Массив();

	Если ЭтоСписокФайлов Тогда
		// открываем и читаем построчно исходный файл
		ЧтениеСписка = Новый ЧтениеТекста(ПутьКАрхиву, КодировкаТекста.UTF8);
		СтрокаСписка = ЧтениеСписка.ПрочитатьСтроку();
		Пока СтрокаСписка <> Неопределено Цикл
			Если ЗначениеЗаполнено(СокрЛП(СтрокаСписка)) Тогда
				МассивФайловЧастей.Добавить(ДанныеИсхФайла.Путь + СтрокаСписка);
			КонецЕсли;
				
			СтрокаСписка = ЧтениеСписка.ПрочитатьСтроку();
		КонецЦикла;
			
		ЧтениеСписка.Закрыть();

		МассивФайловЧастей.Добавить(ДанныеИсхФайла.ПолноеИмя);

		ПерваяЧастьАрхива = МассивФайловЧастей[0];

	Иначе
		ПерваяЧастьАрхива = ПутьКАрхиву;
		МассивФайловЧастей = НайтиФайлы(ДанныеИсхФайла.Путь, ДанныеИсхФайла.ИмяБезРасширения + ".???", Ложь);
	КонецЕсли;

	КомандаАрхиватора = СтрШаблон("""%1"" x -aoa -y  ""%2""", Архиватор, ПерваяЧастьАрхива);
	
	Лог.Отладка("команда архиватора: " + КомандаАрхиватора);
	КодВозврата = 0;
	ЗапуститьПриложение(КомандаАрхиватора, ДанныеИсхФайла.Путь, Истина, КодВозврата);

	Если КодВозврата = 0 Тогда
		Лог.Отладка("Всего частей: " + МассивФайловЧастей.Количество());

		Если УдалитьИсточник Тогда
			Для Каждого ФайлЧасти Из МассивФайловЧастей Цикл
				УдалитьФайлы(ФайлЧасти);
			КонецЦикла;
		КонецЕсли;

		КонецЦикла;
	Иначе

		Лог.Ошибка("Распаковка завершилось с ошибкой. Код возврата " + КодВозврата);
		ФайлОшибокАрх = Новый Файл(ИмяФайлаОшибокАрхивации);
		Если ФайлОшибокАрх.Существует() Тогда
			ЧтениеФайла = Новый ЧтениеТекста(ИмяФайлаОшибокАрхивации);
			СтрокаФайлаОшибок = ЧтениеФайла.ПрочитатьСтроку();
			Пока СтрокаФайлаОшибок <> Неопределено Цикл
				Лог.Ошибка(СтрокаФайлаОшибок);
				СтрокаФайлаОшибок = ЧтениеФайла.ПрочитатьСтроку();
			КонецЦикла;
			ЧтениеФайла.Закрыть();
			УдалитьФайлы(ИмяФайлаОшибокАрхивации);
		КонецЕсли;

		Возврат;
	КонецЕсли;

КонецПроцедуры // РаспаковатьАрхив()

Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");