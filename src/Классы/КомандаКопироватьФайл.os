
///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Перем Лог;

// Интерфейсная процедура, выполняет регистрацию команды и настройку парсера командной строки
//   
// Параметры:
//   ИмяКоманды 	- Строка										- Имя регистрируемой команды
//   Парсер 		- ПарсерАргументовКоманднойСтроки (cmdline)		- Парсер командной строки
//
Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Копировать файл");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-params",
		"Файлы JSON содержащие значения параметров,
		|могут быть указаны несколько файлов разделенные "";""
		|(параметры командной строки имеют более высокий приоритет)");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-src",
		"Файл источник");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-dst",
		"Файл/каталог приемник (если оканчивается на ""\"", то каталог)");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-replace",
		"Перезаписывать существующие файлы");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-delsrc",
		"Выполнить перемещение файлов (удалить источник после копирования)");

    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры //ЗарегистрироватьКоманду()

// Интерфейсная процедура, выполняет текущую команду
//   
// Параметры:
//   ПараметрыКоманды 	- Соответствие						- Соответствие параметров команды и их значений
//
// Возвращаемое значение:
//	Число - код возврата команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	ЗапускПриложений.ПрочитатьПараметрыКомандыИзФайла(ПараметрыКоманды["-params"], ПараметрыКоманды);
	
	Источник		= ПараметрыКоманды["-src"];
	Приемник		= ПараметрыКоманды["-dst"];
	Перезаписывать	= ПараметрыКоманды["-replace"];
	УдалитьИсточник	= ПараметрыКоманды["-delsrc"];

	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();

	Если ПустаяСтрока(Источник) Тогда
		Лог.Ошибка("Не указан файл-источник");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(Приемник) Тогда
		Лог.Ошибка("Не указан файл/каталог приемник");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Попытка
		ОписаниеРезультата = "";
		
		Результат = КомандаКопироватьФайл(Источник, Приемник, Перезаписывать, УдалитьИсточник, ОписаниеРезультата);

		Если Не ПустаяСтрока(ОписаниеРезультата) Тогда
			Лог.Информация("Вывод команды: " + ОписаниеРезультата);
		КонецЕсли;
		
		Если Результат = 0 Тогда
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецЕсли;

		Возврат ВозможныйРезультат.Успех;
	Исключение
		Лог.Ошибка("Вывод команды: " + ОписаниеРезультата + Символы.ПС + ОписаниеОшибки());
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

КонецФункции //ВыполнитьКоманду()

// Функция, выполняет копирование/перемещение указанных файлов
//   
// Параметры:
//   Источник 				- Строка						- Копируемые файлы
//   Приемник 				- Строка						- Назначение копирования, каталог или файл
//   Перезаписывать			- Булево						- Перезаписывать существующие файлы
//   УдалитьИсточник		- Строка						- Выполнить перемещение файлов (удалить источник после копирования)
//   ОписаниеРезультата		- Строка						- (Возвращаемый) вывод команды копирования
//
// Возвращаемое значение:
//	Число - код возврата команды
//
Функция КомандаКопироватьФайл(Источник, Приемник, Перезаписывать = Истина, УдалитьИсточник = Ложь, ОписаниеРезультата = "")

	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду("xcopy");
	КомандаРК.ДобавитьПараметр(Источник);
	КомандаРК.ДобавитьПараметр(Приемник);
	КомандаРК.ДобавитьПараметр("/Y");
	КомандаРК.ДобавитьПараметр("/Z");
	КомандаРК.ДобавитьПараметр("/V");
	КомандаРК.ДобавитьПараметр("/J");

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы( Ложь );
	КомандаРК.ПоказыватьВыводНемедленно( Ложь );
	
	КодВозврата = КомандаРК.Исполнить();

	ОписаниеРезультата = КомандаРК.ПолучитьВывод();
	
	Если УдалитьИсточник Тогда
		КомандаУдалитьФайл(Источник);
	КонецЕсли;
	
	Возврат КодВозврата = 0;
	
КонецФункции //КомандаКопироватьФайл()

// Функция, выполняет удаление указанных файлов
//   
// Параметры:
//   Источник 				- Строка						- Удаляемые файлы
//   ОписаниеРезультата		- Строка						- (Возвращаемый) вывод команды копирования
//
// Возвращаемое значение:
//	Число - код возврата команды
//
Функция КомандаУдалитьФайл(ПутьКФайлу, ОписаниеРезультата = "")

	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду("del");
	КомандаРК.ДобавитьПараметр("/F ");
	КомандаРК.ДобавитьПараметр("/Q ");
	КомандаРК.ДобавитьПараметр(ПутьКФайлу);

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы( Ложь );
	КомандаРК.ПоказыватьВыводНемедленно( Ложь );
	
	КодВозврата = КомандаРК.Исполнить();

	ОписаниеРезультата = КомандаРК.ПолучитьВывод();
	
	Возврат КодВозврата = 0;
	
КонецФункции //КомандаУдалитьФайл()

Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");